name: Test localgovdrupal drupal-module

on:
  workflow_call:
    inputs:
      project:
        description: 'LocalGov Drupal module name'
        required: true
        type: string
      project_path:
        description: 'LocalGov Drupal module path'
        required: true
        type: string
      use_module_phpstan_config:
        description: 'Use phpstan.neon from the module under test, instead of the drupal root.'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Install LocalGov Drupal
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        localgov-version:
          - '3.x'
        drupal-version:
          - '~10.0'
        php-version:
          - '8.1'
          - '8.2'
          - '8.3'

    steps:
      - name: Save git branch and git repo names to env if this is not a pull request
        if: github.event_name != 'pull_request'
        run: |
          echo "GIT_BASE=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "HEAD_USER=localgovdrupal" >> $GITHUB_ENV

      - name: Save git branch and git repo names to env if this is a pull request
        if: github.event_name == 'pull_request'
        run: |
          echo "GIT_BASE=${GITHUB_BASE_REF}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          export HEAD="${{ github.event.pull_request.head.label }}"
          echo "HEAD_USER=${HEAD%%:*}" >> $GITHUB_ENV

      - name: Set composer branch reference for version branches
        if: endsWith(github.ref, '.x') || endsWith(env.GIT_BRANCH, '.x')
        run: echo "COMPOSER_REF=${GIT_BRANCH}-dev" >> $GITHUB_ENV

      - name: Set composer branch reference for non-version branches
        if: endsWith(github.ref, '.x') == false && endsWith(env.GIT_BRANCH, '.x') == false
        run: echo "COMPOSER_REF=dev-${GIT_BRANCH}" >> $GITHUB_ENV

      - name: Get the latest tagged release for branch version
        run: |
          LATEST_RELEASE=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${GITHUB_REPOSITORY}/git/matching-refs/tags/${GIT_BASE%%.*} | grep -Po '(?<=refs/tags/)[^"]+' | tail -1)
          if [ -z $LATEST_RELEASE ]; then LATEST_RELEASE=1; fi
          echo "LATEST_RELEASE=${LATEST_RELEASE}" >> $GITHUB_ENV

      - name: Cached workspace
        uses: actions/cache@v4
        with:
          path: ./html
          key: localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-${{ github.run_id }}-${{ secrets.CACHE_VERSION }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Clone drupal_container
        uses: actions/checkout@v4
        with:
          repository: localgovdrupal/drupal-container
          ref: php${{ matrix.php-version }}

      - name: Create LocalGov Drupal project
        run: |
          composer create-project --stability dev --no-install localgovdrupal/localgov-project ./html "${{ matrix.localgov-version }}"
          composer --working-dir=./html require --no-install localgovdrupal/localgov:${{ matrix.localgov-version }}-dev
          composer --working-dir=./html require --no-install drupal/core-recommended:${{ matrix.drupal-version }} drupal/core-composer-scaffold:${{ matrix.drupal-version }} drupal/core-project-message:${{ matrix.drupal-version }} drupal/core-dev:${{ matrix.drupal-version }}
          composer --working-dir=./html install

      - name: Obtain the test target using Composer
        if: env.HEAD_USER == 'localgovdrupal'
        run: |
          composer --working-dir=html config repositories.1 vcs git@github.com:${{inputs.project}}.git
          composer global config github-oauth.github.com ${{ github.token }}
          composer --working-dir=./html require --with-all-dependencies ${{inputs.project}}:"${COMPOSER_REF} as ${LATEST_RELEASE}"

      - name: Obtain the test target using Git
        if: env.HEAD_USER != 'localgovdrupal'
        uses: actions/checkout@v4
        with:
          path: ${{inputs.project_path}}

      - name: Obtain suggested dependencies
        run: composer --working-dir=./html/${{inputs.project_path}} suggests --list | xargs composer --working-dir=./html require

      - name: Obtain dev dependencies
        if: hashFiles('./html/${{inputs.project_path}}/composer.json') != ''
        run: jq --raw-output '.["require-dev"] | values | to_entries[] | @sh "\(.key):\(.value)"' ./html/${{inputs.project_path}}/composer.json | xargs composer --working-dir=./html require

  eslint:
    name: ESLint JS checks
    needs: build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        localgov-version:
          - '3.x'
        drupal-version:
          - '~10.0'
        php-version:
          - '8.3'

    steps:
      - name: Cached workspace
        uses: actions/cache@v4
        with:
          path: ./html
          key: localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-${{ github.run_id }}-${{ secrets.CACHE_VERSION }}
          restore-keys: |
            localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-

      - name: Run coding standards checks
        #if: hashFiles(format('./html/{0}/**/*.js', inputs.project_path)) != '' }}
        run: |
          cd html/web/core
          npm i
          node ./node_modules/eslint/bin/eslint.js ../../${{inputs.project_path}}

  phpcs:
    name: Coding standards checks
    needs: build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        localgov-version:
          - '3.x'
        drupal-version:
          - '~10.0'
        php-version:
          - '8.3'

    steps:
      - name: Cached workspace
        uses: actions/cache@v4
        with:
          path: ./html
          key: localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-${{ github.run_id }}-${{ secrets.CACHE_VERSION }}
          restore-keys: |
            localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Run coding standards checks
        run: |
          cd html
          ./bin/phpcs -p ${{inputs.project_path}}
  
  phpstan:
    name: Static analysis checks
    needs: build
    runs-on: ubuntu-latest
    env:
      PHPSTAN_NEON_PATH: "./phpstan.neon"

    strategy:
      fail-fast: false
      matrix:
        localgov-version:
          - '3.x'
        drupal-version:
          - '~10.0'
        php-version:
          - '8.3'

    steps:
      - name: Cached workspace
        uses: actions/cache@v4
        with:
          path: ./html
          key: localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-${{ github.run_id }}-${{ secrets.CACHE_VERSION }}
          restore-keys: |
            localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Override phpstan.neon path if requested
        if: ${{inputs.use_module_phpstan_config}}
        run: echo "PHPSTAN_NEON_PATH=\"${{inputs.project_path}}/phpstan.neon\"" >> $GITHUB_ENV

      - name: Run static analysis checks
        run: |
          cd html
          ./bin/phpstan analyse -c ${{ env.PHPSTAN_NEON_PATH }} ${{inputs.project_path}}
  
  phpunit:
    name: PHPUnit tests
    needs: build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        localgov-version:
          - '3.x'
        drupal-version:
          - '~10.0'
        php-version:
          - '8.1'
          - '8.2'
          - '8.3'

    steps:
      - name: Clone Drupal container
        uses: actions/checkout@v4
        with:
          repository: localgovdrupal/drupal-container
          ref: php${{ matrix.php-version }}

      - name: Cached workspace
        uses: actions/cache@v4
        with:
          path: ./html
          key: localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-${{ github.run_id }}-${{ secrets.CACHE_VERSION }}
          restore-keys: |
            localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-

      - name: Start Docker environment
        run: docker compose -f docker-compose.yml up -d

      - name: Run PHPUnit tests
        run: |
          mkdir -p ./html/web/sites/simpletest && chmod 777 ./html/web/sites/simpletest
          sed -i "s#http://localgov.lndo.site#http://drupal#" ./html/phpunit.xml.dist
          docker exec -t drupal bash -c 'chown docker:docker -R /var/www/html'
          docker exec -u docker -t drupal bash -c "cd /var/www/html && ./bin/paratest --processes=4 /var/www/html/${{inputs.project_path}}"